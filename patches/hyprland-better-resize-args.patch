diff --git a/src/Compositor.cpp b/src/Compositor.cpp
index 154ec135..73c5381c 100644
--- a/src/Compositor.cpp
+++ b/src/Compositor.cpp
@@ -2577,12 +2577,12 @@ PHLLS CCompositor::getLayerSurfaceFromSurface(SP<CWLSurfaceResource> pSurface) {
 }
 
 // returns a delta
-Vector2D CCompositor::parseWindowVectorArgsRelative(const std::string& args, const Vector2D& relativeTo) {
+Vector2D CCompositor::parseWindowVectorArgsRelative(const std::string& args, const PHLWINDOW pWindow, const bool isPosition) {
+    const auto& relativeTo = isPosition ? pWindow->m_realPosition->goal() : pWindow->m_realSize->goal();
+
     if (!args.contains(' ') && !args.contains('\t'))
         return relativeTo;
 
-    const auto  PMONITOR = m_lastMonitor;
-
     bool        xIsPercent = false;
     bool        yIsPercent = false;
     bool        isExact    = false;
@@ -2616,8 +2616,17 @@ Vector2D CCompositor::parseWindowVectorArgsRelative(const std::string& args, con
     int Y = 0;
 
     if (isExact) {
+        const auto PMONITOR = pWindow->m_monitor.lock();
+        if (!PMONITOR)
+            return relativeTo;
+
         X = xIsPercent ? std::stof(x) * 0.01 * PMONITOR->m_size.x : std::stoi(x);
         Y = yIsPercent ? std::stof(y) * 0.01 * PMONITOR->m_size.y : std::stoi(y);
+
+        if (isPosition) {
+            X += xIsPercent ? PMONITOR->m_position.x : 0;
+            Y += xIsPercent ? PMONITOR->m_position.y : 0;
+        }
     } else {
         X = xIsPercent ? (std::stof(x) * 0.01 * relativeTo.x) + relativeTo.x : std::stoi(x) + relativeTo.x;
         Y = yIsPercent ? (std::stof(y) * 0.01 * relativeTo.y) + relativeTo.y : std::stoi(y) + relativeTo.y;
diff --git a/src/Compositor.hpp b/src/Compositor.hpp
index 7c81c777..d916bb6a 100644
--- a/src/Compositor.hpp
+++ b/src/Compositor.hpp
@@ -131,7 +131,7 @@ class CCompositor {
     void                   warpCursorTo(const Vector2D&, bool force = false);
     PHLLS                  getLayerSurfaceFromSurface(SP<CWLSurfaceResource>);
     void                   closeWindow(PHLWINDOW);
-    Vector2D               parseWindowVectorArgsRelative(const std::string&, const Vector2D&);
+    Vector2D               parseWindowVectorArgsRelative(const std::string&, const PHLWINDOW pWindow, const bool isPosition);
     PHLWORKSPACE           createNewWorkspace(const WORKSPACEID&, const MONITORID&, const std::string& name = "",
                                               bool isEmpty = true); // will be deleted next frame if left empty and unfocused!
     void                   setActiveMonitor(PHLMONITOR);
diff --git a/src/managers/KeybindManager.cpp b/src/managers/KeybindManager.cpp
index 1bd7e1a2..27eace7d 100644
--- a/src/managers/KeybindManager.cpp
+++ b/src/managers/KeybindManager.cpp
@@ -2192,7 +2192,7 @@ SDispatchResult CKeybindManager::resizeActive(std::string args) {
     if (PLASTWINDOW->isFullscreen())
         return {.success = false, .error = "Window is fullscreen"};
 
-    const auto SIZ = g_pCompositor->parseWindowVectorArgsRelative(args, PLASTWINDOW->m_realSize->goal());
+    const auto SIZ = g_pCompositor->parseWindowVectorArgsRelative(args, PLASTWINDOW, false);
 
     if (SIZ.x < 1 || SIZ.y < 1)
         return {.success = false, .error = "Invalid size provided"};
@@ -2214,7 +2214,7 @@ SDispatchResult CKeybindManager::moveActive(std::string args) {
     if (PLASTWINDOW->isFullscreen())
         return {.success = false, .error = "Window is fullscreen"};
 
-    const auto POS = g_pCompositor->parseWindowVectorArgsRelative(args, PLASTWINDOW->m_realPosition->goal());
+    const auto POS = g_pCompositor->parseWindowVectorArgsRelative(args, PLASTWINDOW, true);
 
     g_pLayoutManager->getCurrentLayout()->moveActiveWindow(POS - PLASTWINDOW->m_realPosition->goal());
 
@@ -2236,7 +2236,7 @@ SDispatchResult CKeybindManager::moveWindow(std::string args) {
     if (PWINDOW->isFullscreen())
         return {.success = false, .error = "Window is fullscreen"};
 
-    const auto POS = g_pCompositor->parseWindowVectorArgsRelative(MOVECMD, PWINDOW->m_realPosition->goal());
+    const auto POS = g_pCompositor->parseWindowVectorArgsRelative(MOVECMD, PWINDOW, true);
 
     g_pLayoutManager->getCurrentLayout()->moveActiveWindow(POS - PWINDOW->m_realPosition->goal(), PWINDOW);
 
@@ -2258,7 +2258,7 @@ SDispatchResult CKeybindManager::resizeWindow(std::string args) {
     if (PWINDOW->isFullscreen())
         return {.success = false, .error = "Window is fullscreen"};
 
-    const auto SIZ = g_pCompositor->parseWindowVectorArgsRelative(MOVECMD, PWINDOW->m_realSize->goal());
+    const auto SIZ = g_pCompositor->parseWindowVectorArgsRelative(MOVECMD, PWINDOW, false);
 
     if (SIZ.x < 1 || SIZ.y < 1)
         return {.success = false, .error = "Invalid size provided"};
