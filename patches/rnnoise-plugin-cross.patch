diff --git a/external/JUCE/extras/Build/CMake/JUCEUtils.cmake b/external/JUCE/extras/Build/CMake/JUCEUtils.cmake
index cca3b66..0ee0af3 100644
--- a/external/JUCE/extras/Build/CMake/JUCEUtils.cmake
+++ b/external/JUCE/extras/Build/CMake/JUCEUtils.cmake
@@ -1024,7 +1024,7 @@ function(_juce_set_plugin_target_properties shared_code_target kind)
         set_target_properties(${target_name} PROPERTIES LIBRARY_OUTPUT_DIRECTORY "${output_path}")
 
         add_custom_command(TARGET ${target_name} POST_BUILD
-            COMMAND juce::juce_lv2_helper "$<TARGET_FILE:${target_name}>"
+            COMMAND "../../external/JUCE/tools/modules/juce_audio_plugin_client/juce_lv2_helper" "$<TARGET_FILE:${target_name}>"
             VERBATIM)
 
         _juce_set_copy_properties(${shared_code_target} ${target_name} "${output_path}" JUCE_LV2_COPY_DIR)
diff --git a/external/JUCE/extras/Build/juceaide/CMakeLists.txt b/external/JUCE/extras/Build/juceaide/CMakeLists.txt
index e776f32..2d7af7a 100644
--- a/external/JUCE/extras/Build/juceaide/CMakeLists.txt
+++ b/external/JUCE/extras/Build/juceaide/CMakeLists.txt
@@ -54,9 +54,9 @@ else()
     # juceaide. If you really want to set the compilers for juceaide, pass the appropriate
     # CMAKE_<lang>_COMPILER flags when configuring CMake.
     if(CMAKE_CROSSCOMPILING)
-        unset(ENV{ASM})
-        unset(ENV{CC})
-        unset(ENV{CXX})
+        # unset(ENV{ASM})
+        # unset(ENV{CC})
+        # unset(ENV{CXX})
     else()
         # When building with clang-cl in Clion on Windows for an x64 target, the ABI detection phase
         # of the inner build can fail unless we pass through these flags too
